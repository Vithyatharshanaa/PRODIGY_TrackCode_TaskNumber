def password_strength(password):
  """
  Assesses the strength of a password based on various criteria.

  Args:
    password: The password to assess.

  Returns:
    A tuple containing:
      - strength_score: A score between 0 (weakest) and 4 (strongest).
      - feedback: A string with feedback on the password's strength.
  """

  criteria = {
    "length": {
      "min_length": 8,
      "score": 1
    },
    "uppercase": {
      "present": True,
      "score": 1
    },
    "lowercase": {
      "present": True,
      "score": 1
    },
    "numbers": {
      "present": True,
      "score": 1
    },
    "special_chars": {
      "present": True,
      "score": 1
    }
  }

  strength_score = 0
  feedback = []

  # Check length
  if len(password) >= criteria["length"]["min_length"]:
    strength_score += criteria["length"]["score"]
  else:
    feedback.append(f"Password is too short. Minimum length is {criteria['length']['min_length']} characters.")

  # Check uppercase letters
  if any(char.isupper() for char in password):
    strength_score += criteria["uppercase"]["score"]
  else:
    feedback.append("Password should contain at least one uppercase letter.")

  # Check lowercase letters
  if any(char.islower() for char in password):
    strength_score += criteria["lowercase"]["score"]
  else:
    feedback.append("Password should contain at least one lowercase letter.")

  # Check numbers
  if any(char.isdigit() for char in password):
    strength_score += criteria["numbers"]["score"]
  else:
    feedback.append("Password should contain at least one number.")

  # Check special characters
  if any(char in "!@#$%^&*()_+-=[]{};':\"\\|,<.>/?`~" for char in password):
    strength_score += criteria["special_chars"]["score"]
  else:
    feedback.append("Password should contain at least one special character.")

  # Provide overall feedback
  if strength_score == 0:
    feedback.append("Password is very weak.")
  elif strength_score == 1 or strength_score == 2:
    feedback.append("Password is weak. Consider adding more complexity.")
  elif strength_score == 3:
    feedback.append("Password is moderately strong.")
  else:
    feedback.append("Password is strong.")

  return strength_score, "\n".join(feedback)

# Example usage
password = "MySecretPassword123!"
strength_score, feedback = password_strength(password)

print(f"Password strength score: {strength_score}")
print(f"Feedback:\n{feedback}")
